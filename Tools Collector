<#
Tools Collector - PowerShell Script (Enhanced UI Version)
Made by: unknown
Improved by: ChatGPT (UI + Timer + Spinner)
#>

Clear-Host
$host.UI.RawUI.WindowTitle = "ðŸ§° Tools Collector"
Write-Host "`n==========================" -ForegroundColor DarkCyan
Write-Host "      TOOLS COLLECTOR     " -ForegroundColor Cyan
Write-Host "==========================" -ForegroundColor DarkCyan
Write-Host "Made by: unknown `n" -ForegroundColor Gray

# Folder setup
$root = 'C:\'
$name = 'SS'
$i = 1
while (Test-Path -Path ("$root$name$i")) { $i++ }
$folder = "$root$name$i"
New-Item -Path $folder -ItemType Directory | Out-Null
Write-Host "[+] Created folder: $folder`n" -ForegroundColor Green

# File URLs
$urls = @(
    'https://github.com/spokwn/BAM-parser/releases/download/v1.2.9/BAMParser.exe',
    'https://github.com/spokwn/Tool/releases/download/v1.1.3/espouken.exe',
    'https://github.com/spokwn/KernelLiveDumpTool/releases/download/v1.1/KernelLiveDumpTool.exe',
    'https://github.com/spokwn/PathsParser/releases/download/v1.2/PathsParser.exe',
    'https://github.com/spokwn/prefetch-parser/releases/download/v1.5.5/PrefetchParser.exe',
    'https://github.com/spokwn/JournalTrace/releases/download/1.2/JournalTrace.exe',
    'https://www.nirsoft.net/utils/winprefetchview-x64.zip',
    'https://github.com/winsiderss/si-builds/releases/download/3.2.25275.112/systeminformer-build-canary-setup.exe',
    'https://www.nirsoft.net/utils/usbdeview-x64.zip',
    'https://www.nirsoft.net/utils/networkusageview-x64.zip',
    'https://d1kpmuwb7gvu1i.cloudfront.net/AccessData_FTK_Imager_4.7.1.exe',
    'https://github.com/Yamato-Security/hayabusa/releases/download/v3.6.0/hayabusa-3.6.0-win-x64.zip',
    'https://download.ericzimmermanstools.com/net9/TimelineExplorer.zip',
    'https://www.nirsoft.net/utils/usbdrivelog.zip',
    'https://www.voidtools.com/Everything-1.4.1.1029.x64-Setup.exe',
    'https://www.nirsoft.net/utils/previousfilesrecovery-x64.zip',
    'https://github.com/Col-E/Recaf/releases/download/2.21.14/recaf-2.21.14-J8-jar-with-dependencies.jar',
    'https://github.com/NotRequiem/InjGen/releases/download/v2.0/InjGen.exe'
)

# Ensure TLS 1.2+
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 -bor [Net.SecurityProtocolType]::Tls13
Add-Type -AssemblyName System.IO.Compression.FileSystem

# Spinner setup
$spinnerChars = @("|", "/", "-", "\")
function Show-Spinner {
    param([int]$i, [string]$text)
    $char = $spinnerChars[$i % $spinnerChars.Length]
    Write-Host -NoNewline "`r[$char] $text  "
}

# Reliable Download
function Reliable-Download($url, $dest) {
    $attempts = 0
    while ($attempts -lt 3) {
        try {
            $attempts++
            $wc = New-Object System.Net.WebClient
            $wc.Headers.Add('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64)')

            # Timer start
            $sw = [System.Diagnostics.Stopwatch]::StartNew()

            # Spinner + progress bar thread
            $job = Start-Job -ScriptBlock {
                param($text)
                $spinnerChars = @("|","/","-","\")
                $i = 0
                while ($true) {
                    Write-Host -NoNewline "`r[$($spinnerChars[$i % 4])] $text  "
                    Start-Sleep -Milliseconds 150
                    $i++
                }
            } -ArgumentList ("Downloading $([System.IO.Path]::GetFileName($url))")

            $wc.DownloadFile($url, $dest)

            Stop-Job $job | Out-Null
            Remove-Job $job | Out-Null

            $sw.Stop()
            $time = [Math]::Round($sw.Elapsed.TotalSeconds, 2)
            Write-Host "`r[âœ“] Downloaded: $(Split-Path $dest -Leaf) ($time sec)" -ForegroundColor Green
            return $true
        }
        catch {
            if ($attempts -ge 3) {
                Write-Host "`r[âœ—] Failed: $url -> $($_.Exception.Message)" -ForegroundColor Red
                return $false
            }
            else {
                Write-Host "`r[!] Retrying ($attempts/3) for $url..." -ForegroundColor Yellow
                Start-Sleep -Seconds 2
            }
        }
    }
}

$counter = 0
$total = $urls.Count

foreach ($url in $urls) {
    $counter++
    $fileName = [System.IO.Path]::GetFileName($url)
    $filePath = Join-Path $folder $fileName
    Write-Host "`n[$counter/$total] Starting: $fileName" -ForegroundColor Cyan

    $ok = Reliable-Download -url $url -dest $filePath

    if ($ok -and $filePath.ToLower().EndsWith('.zip')) {
        try {
            $outDir = Join-Path $folder ([System.IO.Path]::GetFileNameWithoutExtension($filePath))
            if (-not (Test-Path $outDir)) { New-Item -Path $outDir -ItemType Directory | Out-Null }

            [System.IO.Compression.ZipFile]::ExtractToDirectory($filePath, $outDir)
            Remove-Item $filePath -Force
            Write-Host "    [âœ“] Extracted to: $outDir" -ForegroundColor DarkCyan
        }
        catch {
            Write-Host "    [âœ—] Failed to unzip $fileName -> $($_.Exception.Message)" -ForegroundColor Red
        }
    }

    $progress = [Math]::Round(($counter / $total) * 100, 0)
    Write-Progress -Activity "Downloading Tools..." -Status "$counter of $total complete" -PercentComplete $progress
}

Write-Progress -Activity "Downloading Tools..." -Status "All Done!" -Completed
Write-Host "`nâœ… All tools downloaded successfully to: $folder" -ForegroundColor Green

Start-Process explorer.exe $folder
